qq_plot=qqnorm(data$Potassium, main="Normal Q-Q plot for potassium")
qqline(data$Potassium)
my_cor <- cor(qq_plot$x, qq_plot$y)
legend('topleft', paste0("r = ", round(my_cor,4)))
###TRANSFORMATION OF UNIVARIATE and QQ plots with transformed data
library(MASS)
trans_function <- function(o) {
z <- o+1
boxcoxTransc1 <- boxcox(z~1)
#find the maximum of logLikehood on y-axis
flagidx <- which(boxcoxTransc1$y==max(boxcoxTransc1$y))
#locate the lambda with the maximum logLikelihood
optlam <- boxcoxTransc1$x[flagidx]
vec1 <- z
transvec <- (vec1^optlam-1)/optlam  #according to (4-34)#
qqts <- qqnorm(transvec)
qqline(transvec)
cortrans <- cor(qqts$x, qqts$y)
return(cortrans)
}
#Perform transformations on the seven variables not found to be normally distributed before
trans_function(data$Calories)
trans_function(data$Protein)
trans_function(data$Fat)
trans_function(data$Sodium)
trans_function(data$Fiber)
trans_function(data$Carbohydrates)
trans_function(data$Sugar)
trans_function(data$Potassium)
qq_coef <- function(v1, name){
hist(v1, main=paste("Histogram of", name))
legend('topright', paste0("mean = ", round(mean(v1),3)))
}
s1 <- Full_dataset$Group==1
s2 <- Full_dataset$Group==2
s3 <- Full_dataset$Group==3
#dataset of only group 1 and 2
sub_data1 <- rbind(Full_dataset[s1,3:11],Full_dataset[s2,3:11])
#dataset of only group 1 and 3
sub_data3 <- rbind(Full_dataset[s1,3:11],Full_dataset[s3,3:11])
#dataset of only group 2 and 3
sub_data2 <- rbind(Full_dataset[s2,3:11],Full_dataset[s3,3:11])
#When doing with group 1 vs 2:
par(mfrow=c(2,4))
qq_coef(sub_data1$Protein, "Protein")
qq_coef(sub_data1$Sugar, "Sugar")
qq_coef(sub_data1$Carbohydrates, "Carbohydrates")
qq_coef(sub_data1$Calories, "Calories")
qq_coef(sub_data1$Fat, "Fat")
qq_coef(sub_data1$Sodium, "Sodium")
qq_coef(sub_data1$Fiber, "Fiber")
qq_coef(sub_data1$Potassium, "Potassium")
par(mfrow=c(1,1))
#When doing with group 3 vs 2:
par(mfrow=c(2,4))
qq_coef(sub_data2$Protein, "Protein")
qq_coef(sub_data2$Sugar, "Sugar")
qq_coef(sub_data2$Carbohydrates, "Carbohydrates")
qq_coef(sub_data2$Calories, "Calories")
qq_coef(sub_data2$Fat, "Fat")
qq_coef(sub_data2$Sodium, "Sodium")
qq_coef(sub_data2$Fiber, "Fiber")
qq_coef(sub_data2$Potassium, "Potassium")
par(mfrow=c(1,1))
#When doing with group 3 vs 1:
par(mfrow=c(2,4))
qq_coef(sub_data3$Protein, "Protein")
qq_coef(sub_data3$Sugar, "Sugar")
qq_coef(sub_data3$Carbohydrates, "Carbohydrates")
qq_coef(sub_data3$Calories, "Calories")
qq_coef(sub_data3$Fat, "Fat")
qq_coef(sub_data3$Sodium, "Sodium")
qq_coef(sub_data3$Fiber, "Fiber")
qq_coef(sub_data3$Potassium, "Potassium")
par(mfrow=c(1,1))
#Create the bivariate formula to evaluate normality. x1 and x2 are the variables we are examining
bivar_norm <-function(x1, x2, alpha, name, remove_outlier = FALSE) {
df <- data.frame(x1,x2) #Create dataframe
n <- nrow(df) #Obersvations
p <- ncol(df) #Number of variables
D2 <- mahalanobis(df,center  = colMeans(df),cov = cov(df)) #Generalized squared distance
if(remove_outlier == TRUE){
D2 <- D2[-which.max(D2)]}
chi_plot <- qqplot(qchisq(ppoints(n, a = .5), df = p), D2,
plot.it = F) #Chi square plot values.
#Formula to find the correlation value
my_cor <- cor(chi_plot$x, chi_plot$y) #Correlation value
critical_value <- qchisq(p = alpha,df = p,lower.tail = F) #Calculate critical value
prop_within_contour <- round(length(D2[D2 <= critical_value]) / length(D2),4)
plot(chi_plot,
ylab ='Mahalanobis distances',
xlab ='Chi-square quantiles',
main = paste0(name,'alpha =',alpha)) #Plot chi square plot
legend("topleft",
paste0("r = ", round(my_cor,4), "\n",
"% D2 <= cˆ2: ", prop_within_contour, "\n",
"Expected if normal: ", 1-alpha),
cex = 0.75,
bty = "n") #Add legend to plot
}
#Bivariate Evaluating of Normality
par(mfrow=c(2,4))
#Number of groups g and number of variables (p)
g=3
p=8
#Number of observable
n_1=17
n_2=20
n_3=6
co_1=cov(data1[1:n_1,])
co_2=cov(data1[(n_1+1):(n_1+n_2),])
co_3=cov(data1[(n_1+n_2+1):(n_1+n_2+n_3),])
#Calculatiing S_pooled
S_spol=1/(n_1+n_2+n_3-3)*((n_1-1)*co_1+(n_2-1)*co_2+(n_3-1)*co_3)
#Calculating lambda
lambda=(det(co_1)/det(S_spol))^(n_1-1)*(det(co_2)/det(S_spol))^(n_2-1)*(det(co_3)/det(S_spol))^(n_3-1)
m=-2*log(lambda)
u=(1/(n_1-1)+1/(n_2-1)+1/(n_3-1)-1/(43-3))*((2*p^2+3*p-1)/(6*(p+1)*(g-1)))
#Udregning af c
c=(1-u)*m
#Udregner mængden af frihedsgrader
v=1/2*p*(p+1)*(g-1)
c
#Number of groups g and number of variables (p)
g=3
p=8
#Number of observable
n_1=17
n_2=20
n_3=6
co_1=cov(data1[1:n_1,])
co_2=cov(data1[(n_1+1):(n_1+n_2),])
co_3=cov(data1[(n_1+n_2+1):(n_1+n_2+n_3),])
#Calculatiing S_pooled
S_spol=1/(n_1+n_2+n_3-3)*((n_1-1)*co_1+(n_2-1)*co_2+(n_3-1)*co_3)
#Calculating lambda
lambda=(det(co_1)/det(S_spol))^(n_1-1)*(det(co_2)/det(S_spol))^(n_2-1)*(det(co_3)/det(S_spol))^(n_3-1)
m=-2*log(lambda)
u=(1/(n_1-1)+1/(n_2-1)+1/(n_3-1)-1/(43-3))*((2*p^2+3*p-1)/(6*(p+1)*(g-1)))
#Udregning af c
c=(1-u)*m
c
#Udregner mængden af frihedsgrader
v=1/2*p*(p+1)*(g-1)
#Calculatiing S_pooled
S_spol=1/(n_1+n_2+n_3-3)*((n_1-1)*co_1+(n_2-1)*co_2+(n_3-1)*co_3)
co_3=cov(data1[(n_1+n_2+1):(n_1+n_2+n_3),])
m=-2*log(lambda)
u=(1/(n_1-1)+1/(n_2-1)+1/(n_3-1)-1/(43-3))*((2*p^2+3*p-1)/(6*(p+1)*(g-1)))
#Udregning af c
c=(1-u)*m
c
#Udregner mængden af frihedsgrader
v=1/2*p*(p+1)*(g-1)
pooled_covar<-((201-1)/(n-3))*covar_5a +((202-1)/(n-3))covar_5b+((204-1)/(n-3))covar_5c
print(pooled_covar)
data_5a<-read.table(file = 'dataset5a.tsv', sep = '\t', header = F)
data_5b<-read.table(file = 'dataset5b.tsv', sep = '\t', header = F)
data_5a<-read.table(file = 'dataset5a.tsv', sep = '\t', header = F)
library(readr)
DP_LIVE_17112022102657496 <- read_csv("Downloads/DP_LIVE_17112022102657496.csv")
View(DP_LIVE_17112022102657496)
library(readr)
DP_LIVE_17112022102657496 <- read_csv("Downloads/DP_LIVE_17112022102657496.csv")
View(DP_LIVE_17112022102657496)
View(DP_LIVE_17112022102657496)
dP <- DP_LIVE_17112022102657496
dP[LOCATION]
plot("location", "value")
dP["location"]
dP["LOCATION"]
Summary(dP["LOCATION"])
plot("LOCATION", "Value")
summary(dP)
location <- dP["LOCATION"]
summary(location)
plot(location)
# Set your working directory to the GitHub/Speciale Folder
setwd("~/Desktop/GitHub/Speciale")
path_to_specific_folder = "~/Desktop/GitHub/Speciale/Graphs/Graphs_images"
# Insert slope and interception from spyder to get the most accurate values. If you dont have them, run the part in the bottom.
slope = 0.07000588853139435
intercept = -4.620380213555453
library(ggplot2)
data <- read.csv('FinishedAnnotations_data.csv', header = T, sep = ',')
data <- data[data$Pathology.polyp.size != 0, ]
# 0-6 mm
sub_5 <- subset(data, Pathology.polyp.size <= 5 )
x_5 = (5-(intercept))/slope
#6-9 mm
sub_6to9 <- subset(data, Pathology.polyp.size <= 9  & Pathology.polyp.size >5 )
x_6to9 = (9-(intercept))/slope
#10-19
sub_10to19 <- subset(data, Pathology.polyp.size < 20 & Pathology.polyp.size >9 )
x_10to19 = (19-(intercept))/slope
#>20+
sub_20 <- subset(data, Pathology.polyp.size >19 )
x_20 = (19-(intercept))/slope
#Distribution plots
df_distribution <- bind_rows(list(size_0_5_mm= sub_5,
size_6_9_mm = sub_6to9 ,
size_9_19_mm = sub_10to19,
size_20_mm = sub_20),
.id = "dataset")
band_colors <- c("red", "green", "blue", "orange")
distribution_plot <- ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = band_colors , name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "",
x = "Polyp pixel size",
y = "Density")+ theme(plot.title = element_text(hjust = 0.5))
#Distribution plots
df_distribution <- bind_rows(list(size_0_5_mm= sub_5,
size_6_9_mm = sub_6to9 ,
size_9_19_mm = sub_10to19,
size_20_mm = sub_20),
.id = "dataset")
library(dplyr)
#Distribution plots
df_distribution <- bind_rows(list(size_0_5_mm= sub_5,
size_6_9_mm = sub_6to9 ,
size_9_19_mm = sub_10to19,
size_20_mm = sub_20),
.id = "dataset")
# create the plot using ggplot2
band_colors <- c("red", "green", "blue", "orange")
distribution_plot <- ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = band_colors , name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "",
x = "Polyp pixel size",
y = "Density")+ theme(plot.title = element_text(hjust = 0.5))
bw <- density(df_distribution$Largest.diameter, bw = df_distribution$layers[[1]]$stat_params$bw)$bw
print(paste0("Bandwidth = ", round(bw,2)))
dis_plot_size = 1
dis_plot_style = "dashed"
distribution_plot + geom_vline(xintercept = x_5, color = "black", linetype = dis_plot_style, size = dis_plot_size)+
geom_vline(xintercept = x_6to9, color = "black", linetype = dis_plot_style, size = dis_plot_size)+geom_vline(xintercept = x_10to19, color = "black", linetype = dis_plot_style, size = dis_plot_size)+
theme(legend.position="bottom")+theme(legend.title=element_blank())+
#labs(caption = paste0("Bandwidth = ", round(bw,2)))+
annotate("text", x =100 , y = 0.0075, label = "Interval 0-5 mm", size = 2)+
annotate("text", x =170 , y = 0.0075, label = "Interval 6-9 mm",   size = 2)+
annotate("text", x = x_10to19- ((x_10to19-x_6to9)/2) , y = 0.0075, label = "Interval 10-19 mm",   size = 2)+
annotate("text", x =450 , y = 0.0075, label = "Interval 20+ mm",   size = 2)
setwd(path_to_specific_folder)
ggsave("distribution_plot.png", width = 20, height = 10, units = "cm")
library(gridtext)
library(gridExtra)
# Create a histogram with ggplot
bin5<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 5, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 5"),
xmin = 400, xmax = 600, ymin = 3, ymax = 5)+theme(legend.position="bottom")
ggsave("distribution_plot_bins5.png")
bin20<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 20, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 20"),
xmin = 400, xmax = 600, ymin = 8, ymax = 10)+theme(legend.position="bottom")
grid.arrange(bin5, bin20, ncol = 2)
ggsave("distribution_plot_bins20.png")
#_____________________________________________________________________________________________________________________________________
#%% If you don't have slope and intercept, this will give a little deviation, caused by decimals
#Pathology polyp size vs pixels_______
plot(data$Largest.diameter, data$Pathology.polyp.size, main = 'Pathology polyp size vs pixels', xlab = "Polyp length in pixels", ylab = "Pathology polyp size in mm")
abline(lm(data$Pathology.polyp.size ~ data$Largest.diameter), col="blue")
my_mod_pixels <- lm(Pathology.polyp.size ~ Largest.diameter, data)          # Estimate linear regression model
sum_pixels <- summary(my_mod_pixels)
#sum_pixels
#sum_pixels$residuals
my_coef_OC <- coef(my_mod_pixels)            # Extract coefficients of model
my_coef_OC
paste('y =', round(coef(my_mod_pixels)[[2]],2), '* x', '+', round(coef(my_mod_pixels)[[1]],2))
eq <- paste('y =', round(coef(my_mod_pixels)[[2]],2), '*x', '+(', round(coef(my_mod_pixels)[[1]],2),')')
text(x = max(data$Largest.diameter) * 0.8, y = max(data$Pathology.polyp.size) * 0.8, labels = eq, pos = 3, col = "blue")
#_______________________________________
slope = coef(my_mod_pixels)[[2]]
intercept = coef(my_mod_pixels)[[1]]
library(ggplot2)
data <- read.csv('FinishedAnnotations_data.csv', header = T, sep = ',')
data <- data[data$Pathology.polyp.size != 0, ]
# 0-6 mm
sub_5 <- subset(data, Pathology.polyp.size <= 5 )
x_5 = (5-(intercept))/slope
#6-9 mm
sub_6to9 <- subset(data, Pathology.polyp.size <= 9  & Pathology.polyp.size >5 )
x_6to9 = (9-(intercept))/slope
#10-19
sub_10to19 <- subset(data, Pathology.polyp.size < 20 & Pathology.polyp.size >9 )
x_10to19 = (19-(intercept))/slope
#>20+
sub_20 <- subset(data, Pathology.polyp.size >19 )
#Distribution plots #____________________________________________________
df_distribution <- bind_rows(list(size_0_5_mm= sub_5,
size_6_9_mm = sub_6to9 ,
size_9_19_mm = sub_10to19,
size_20_mm = sub_20),
.id = "dataset")
# create the plot using ggplot2
band_colors <- c("red", "green", "blue", "orange")
distribution_plot <- ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = band_colors , name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "",
x = "Polyp pixel size",
y = "Density")+ theme(plot.title = element_text(hjust = 0.5))
bw <- density(df_distribution$Largest.diameter, bw = df_distribution$layers[[1]]$stat_params$bw)$bw
print(paste0("Bandwidth = ", round(bw,2)))
dis_plot_size = 1
dis_plot_style = "dashed"
distribution_plot + geom_vline(xintercept = x_5, color = "black", linetype = dis_plot_style, size = dis_plot_size)+
geom_vline(xintercept = x_6to9, color = "black", linetype = dis_plot_style, size = dis_plot_size)+geom_vline(xintercept = x_10to19, color = "black", linetype = dis_plot_style, size = dis_plot_size)+
theme(legend.position="bottom")+theme(legend.title=element_blank())+
#labs(caption = paste0("Bandwidth = ", round(bw,2)))+
annotate("text", x =100 , y = 0.0075, label = "Interval 0-5 mm", size = 2)+
annotate("text", x =170 , y = 0.0075, label = "Interval 6-9 mm",   size = 2)+
annotate("text", x = x_10to19- ((x_10to19-x_6to9)/2) , y = 0.0075, label = "Interval 10-19 mm",   size = 2)+
annotate("text", x =450 , y = 0.0075, label = "Interval 20+ mm",   size = 2)
setwd(path_to_specific_folder)
ggsave("distribution_plot_dev.png", width = 20, height = 10, units = "cm")
library(gridtext)
library(gridExtra)
# Create a histogram with ggplot
bin5<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 5, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 5"),
xmin = 400, xmax = 600, ymin = 3, ymax = 5)+theme(legend.position="bottom")
ggsave("distribution_plot_bins5_dev.png")
bin20<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 20, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 20"),
xmin = 400, xmax = 600, ymin = 8, ymax = 10)+theme(legend.position="bottom")
grid.arrange(bin5, bin20, ncol = 2)
ggsave("distribution_plot_bins20_dev.png")
library(gridtext)
library(gridExtra)
# Create a histogram with ggplot
bin5<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 5, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 5"),
xmin = 400, xmax = 600, ymin = 3, ymax = 5)+theme(legend.position="bottom")
ggsave("distribution_plot_bins5.png")
bin20<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 20, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 20"),
xmin = 400, xmax = 600, ymin = 8, ymax = 10)+theme(legend.position="bottom")
grid.arrange(bin5, bin20, ncol = 2)
ggsave("distribution_plot_bins20.png")
#_____________________________________________________________________________________________________________________________________
#%% If you don't have slope and intercept, this will give a little deviation, caused by decimals
#Pathology polyp size vs pixels_______
plot(data$Largest.diameter, data$Pathology.polyp.size, main = 'Pathology polyp size vs pixels', xlab = "Polyp length in pixels", ylab = "Pathology polyp size in mm")
abline(lm(data$Pathology.polyp.size ~ data$Largest.diameter), col="blue")
my_mod_pixels <- lm(Pathology.polyp.size ~ Largest.diameter, data)          # Estimate linear regression model
sum_pixels <- summary(my_mod_pixels)
#sum_pixels
#sum_pixels$residuals
my_coef_OC <- coef(my_mod_pixels)            # Extract coefficients of model
my_coef_OC
paste('y =', round(coef(my_mod_pixels)[[2]],2), '* x', '+', round(coef(my_mod_pixels)[[1]],2))
eq <- paste('y =', round(coef(my_mod_pixels)[[2]],2), '*x', '+(', round(coef(my_mod_pixels)[[1]],2),')')
text(x = max(data$Largest.diameter) * 0.8, y = max(data$Pathology.polyp.size) * 0.8, labels = eq, pos = 3, col = "blue")
#_______________________________________
slope = coef(my_mod_pixels)[[2]]
intercept = coef(my_mod_pixels)[[1]]
library(ggplot2)
data <- read.csv('FinishedAnnotations_data.csv', header = T, sep = ',')
data <- data[data$Pathology.polyp.size != 0, ]
# 0-6 mm
sub_5 <- subset(data, Pathology.polyp.size <= 5 )
x_5 = (5-(intercept))/slope
#6-9 mm
sub_6to9 <- subset(data, Pathology.polyp.size <= 9  & Pathology.polyp.size >5 )
x_6to9 = (9-(intercept))/slope
#10-19
sub_10to19 <- subset(data, Pathology.polyp.size < 20 & Pathology.polyp.size >9 )
x_10to19 = (19-(intercept))/slope
#>20+
sub_20 <- subset(data, Pathology.polyp.size >19 )
#Distribution plots #____________________________________________________
df_distribution <- bind_rows(list(size_0_5_mm= sub_5,
size_6_9_mm = sub_6to9 ,
size_9_19_mm = sub_10to19,
size_20_mm = sub_20),
.id = "dataset")
# create the plot using ggplot2
band_colors <- c("red", "green", "blue", "orange")
distribution_plot <- ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = band_colors , name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "",
x = "Polyp pixel size",
y = "Density")+ theme(plot.title = element_text(hjust = 0.5))
bw <- density(df_distribution$Largest.diameter, bw = df_distribution$layers[[1]]$stat_params$bw)$bw
print(paste0("Bandwidth = ", round(bw,2)))
dis_plot_size = 1
dis_plot_style = "dashed"
distribution_plot + geom_vline(xintercept = x_5, color = "black", linetype = dis_plot_style, size = dis_plot_size)+
geom_vline(xintercept = x_6to9, color = "black", linetype = dis_plot_style, size = dis_plot_size)+geom_vline(xintercept = x_10to19, color = "black", linetype = dis_plot_style, size = dis_plot_size)+
theme(legend.position="bottom")+theme(legend.title=element_blank())+
#labs(caption = paste0("Bandwidth = ", round(bw,2)))+
annotate("text", x =100 , y = 0.0075, label = "Interval 0-5 mm", size = 2)+
annotate("text", x =170 , y = 0.0075, label = "Interval 6-9 mm",   size = 2)+
annotate("text", x = x_10to19- ((x_10to19-x_6to9)/2) , y = 0.0075, label = "Interval 10-19 mm",   size = 2)+
annotate("text", x =450 , y = 0.0075, label = "Interval 20+ mm",   size = 2)
setwd(path_to_specific_folder)
ggsave("distribution_plot_dev.png", width = 20, height = 10, units = "cm")
library(gridtext)
library(gridExtra)
# Create a histogram with ggplot
bin5<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 5, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 5"),
xmin = 400, xmax = 600, ymin = 3, ymax = 5)+theme(legend.position="bottom")
ggsave("distribution_plot_bins5_dev.png")
bin20<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 20, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 20"),
xmin = 400, xmax = 600, ymin = 8, ymax = 10)+theme(legend.position="bottom")
grid.arrange(bin5, bin20, ncol = 2)
ggsave("distribution_plot_bins20_dev.png")
x_5 = (5-(intercept))/slope
x_5
x_6to9
library(ggplot2)
library(dplyr)
data <- read.csv('FinishedAnnotations_data.csv', header = T, sep = ',')
data <- data[data$Pathology.polyp.size != 0, ]
# 0-6 mm
sub_5 <- subset(data, Pathology.polyp.size <= 5 )
x_5 = (5-(intercept))/slope
x_5
#6-9 mm
sub_6to9 <- subset(data, Pathology.polyp.size <= 9  & Pathology.polyp.size >5 )
x_6to9 = (9-(intercept))/slope
#10-19
sub_10to19 <- subset(data, Pathology.polyp.size < 20 & Pathology.polyp.size >9 )
x_10to19 = (19-(intercept))/slope
#>20+
sub_20 <- subset(data, Pathology.polyp.size >19 )
x_20 = (19-(intercept))/slope
#Distribution plots
df_distribution <- bind_rows(list(size_0_5_mm= sub_5,
size_6_9_mm = sub_6to9 ,
size_9_19_mm = sub_10to19,
size_20_mm = sub_20),
.id = "dataset")
# create the plot using ggplot2
band_colors <- c("red", "green", "blue", "orange")
distribution_plot <- ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = band_colors , name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "",
x = "Polyp pixel size",
y = "Density")+ theme(plot.title = element_text(hjust = 0.5))
bw <- density(df_distribution$Largest.diameter, bw = df_distribution$layers[[1]]$stat_params$bw)$bw
print(paste0("Bandwidth = ", round(bw,2)))
dis_plot_size = 1
dis_plot_style = "dashed"
distribution_plot + geom_vline(xintercept = x_5, color = "black", linetype = dis_plot_style, size = dis_plot_size)+
geom_vline(xintercept = x_6to9, color = "black", linetype = dis_plot_style, size = dis_plot_size)+geom_vline(xintercept = x_10to19, color = "black", linetype = dis_plot_style, size = dis_plot_size)+
theme(legend.position="bottom")+theme(legend.title=element_blank())+
#labs(caption = paste0("Bandwidth = ", round(bw,2)))+
annotate("text", x =100 , y = 0.0075, label = "Interval 0-5 mm", size = 2)+
annotate("text", x =170 , y = 0.0075, label = "Interval 6-9 mm",   size = 2)+
annotate("text", x = x_10to19- ((x_10to19-x_6to9)/2) , y = 0.0075, label = "Interval 10-19 mm",   size = 2)+
annotate("text", x =450 , y = 0.0075, label = "Interval 20+ mm",   size = 2)
setwd(path_to_specific_folder)
ggsave("distribution_plot.png", width = 20, height = 10, units = "cm")
library(gridtext)
library(gridExtra)
# Create a histogram with ggplot
bin5<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 5, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 5"),
xmin = 400, xmax = 600, ymin = 3, ymax = 5)+theme(legend.position="bottom")
ggsave("distribution_plot_bins5.png")
bin20<-ggplot(df_distribution, aes(x = Largest.diameter, fill = dataset)) +
geom_histogram(binwidth = 20, alpha = 0.5, position = "identity") +
facet_grid(rows = vars(dataset), cols = vars()) +
scale_fill_manual(values = c("red", "green", "blue", "orange"), name = "Dataset", labels=c('0-5 mm', '6-9 mm', '10-19 mm', '20+ mm')) +
labs(title = "", x = "Polyp pixel size", y = "Count")+ theme(plot.title = element_text(hjust = 0.5))+
annotation_custom(textbox_grob("Binwidth = 20"),
xmin = 400, xmax = 600, ymin = 8, ymax = 10)+theme(legend.position="bottom")
grid.arrange(bin5, bin20, ncol = 2)
ggsave("distribution_plot_bins20.png")
